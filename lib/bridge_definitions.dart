// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class ButtplugRs {
  Stream<String> runEngine({required EngineOptionsExternal args, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunEngineConstMeta;

  Future<void> send({required String msgJson, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendConstMeta;

  Future<void> stopEngine({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopEngineConstMeta;

  Future<void> sendBackendServerMessage({required String msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendBackendServerMessageConstMeta;
}

class EngineOptionsExternal {
  final String? sentryApiKey;
  final String? deviceConfigJson;
  final String? userDeviceConfigJson;
  final String serverName;
  final bool crashReporting;
  final bool websocketUseAllInterfaces;
  final int? websocketPort;
  final String? websocketClientAddress;
  final int? frontendWebsocketPort;
  final bool frontendInProcessChannel;
  final int maxPingTime;
  final String? logLevel;
  final bool allowRawMessages;
  final bool useBluetoothLe;
  final bool useSerialPort;
  final bool useHid;
  final bool useLovenseDongleSerial;
  final bool useLovenseDongleHid;
  final bool useXinput;
  final bool useLovenseConnect;
  final bool useDeviceWebsocketServer;
  final int? deviceWebsocketServerPort;
  final bool crashMainThread;
  final bool crashTaskThread;

  const EngineOptionsExternal({
    this.sentryApiKey,
    this.deviceConfigJson,
    this.userDeviceConfigJson,
    required this.serverName,
    required this.crashReporting,
    required this.websocketUseAllInterfaces,
    this.websocketPort,
    this.websocketClientAddress,
    this.frontendWebsocketPort,
    required this.frontendInProcessChannel,
    required this.maxPingTime,
    this.logLevel,
    required this.allowRawMessages,
    required this.useBluetoothLe,
    required this.useSerialPort,
    required this.useHid,
    required this.useLovenseDongleSerial,
    required this.useLovenseDongleHid,
    required this.useXinput,
    required this.useLovenseConnect,
    required this.useDeviceWebsocketServer,
    this.deviceWebsocketServerPort,
    required this.crashMainThread,
    required this.crashTaskThread,
  });
}
